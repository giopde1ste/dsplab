# This CMake script wants to use libusb functionality, therefore it looks
# for libusb include files and libraries.
#
# Operating Systems Supported:
# - Unix (requires pkg-config)
#   Tested with Ubuntu 9.04 and Fedora 11
# - Windows (requires MSVC)
#   Tested with Windows XP
#
# This should work for both 32 bit and 64 bit systems.
#
# Author: F. Kooman <fkooman@tuxed.net>
#

IF(NOT LIBUSB_FOUND)

# FreeBSD has built-in libusb since 800069
IF(CMAKE_SYSTEM_NAME MATCHES FreeBSD)
  EXEC_PROGRAM(sysctl ARGS -n kern.osreldate OUTPUT_VARIABLE FREEBSD_VERSION)
  SET(MIN_FREEBSD_VERSION 800068)
  IF(FREEBSD_VERSION GREATER ${MIN_FREEBSD_VERSION})
    SET(LIBUSB_FOUND TRUE)
    SET(LIBUSB_INCLUDE_DIR "/usr/include")
    SET(LIBUSB_LIBRARIES "libusb.a")
    SET(LIBUSB_LIBRARY_DIRS "/usr/lib/")
  ENDIF(FREEBSD_VERSION GREATER ${MIN_FREEBSD_VERSION})
ENDIF(CMAKE_SYSTEM_NAME MATCHES FreeBSD)

IF(WIN32)
  # Windows with Microsoft Visual C++
  FIND_PATH(LIBUSB_INCLUDE_DIR usb.h "$ENV{ProgramFiles}/LibUSB-Win32/include")
  IF(MSVC)
    IF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x64")
      # on x64 (win64)
      FIND_LIBRARY(LIBUSB_LIBRARIES NAMES libusb PATHS "$ENV{ProgramFiles}/LibUSB-Win32/lib/msvc_x64")
    ELSE(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x64")
      # on x86 (win32)
      FIND_LIBRARY(LIBUSB_LIBRARIES NAMES libusb PATHS "$ENV{ProgramFiles}/LibUSB-Win32/lib/msvc")
    ENDIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x64")
  ENDIF(MSVC)
  IF(MINGW)
    FIND_LIBRARY(LIBUSB_LIBRARIES NAMES libusb PATHS "$ENV{ProgramFiles}/LibUSB-Win32/lib/gcc")
  ENDIF(MINGW)
ELSE(WIN32)

# LIBUSB_INCLUDE_DIR = libusb.h
# LIBUSB_LIBRARIES = libusb.a
# LIBUSB_FOUND = true if LIBUSB is found

if (APPLE)

   SET(TRIAL_PATHS /opt/local/include/libusb-1.0)
   SET(TRIAL_LIBRARY_PATHS /opt/local/lib)

elseif(CMAKE_SYSTEM_NAME MATCHES Linux)

    SET(TRIAL_PATHS
      $ENV{LIBUSB_HOME}/include
      /usr/include
      /usr/local/include
      /opt/local/include/libusb-1.0
    )

    SET(TRIAL_LIBRARY_PATHS
     $ENV{LIBUSB_HOME}/lib
      /usr/lib
      /usr/local/lib
      /opt/lib
      /sw/lib)

endif(APPLE)


    FIND_PATH(LIBUSB_INCLUDE_DIR libusb.h ${TRIAL_PATHS})
    FIND_LIBRARY(LIBUSB_LIBRARIES "usb-1.0" ${TRIAL_LIBRARY_PATHS})

#   MESSAGE(STATUS "LIBUSB_INCLUDE_DIR=${LIBUSB_INCLUDE_DIR}")
#  MESSAGE(STATUS "LIBUSB_LIBRARIES=${LIBUSB_LIBRARIES}")


SET(LIBUSB_FOUND FALSE)
IF(LIBUSB_INCLUDE_DIR AND LIBUSB_LIBRARIES)
  MESSAGE(STATUS "LIBUSB_INCLUDE_DIR=${LIBUSB_INCLUDE_DIR}")
  MESSAGE(STATUS "LIBUSB_LIBRARIES=${LIBUSB_LIBRARIES}")
  SET(LIBUSB_FOUND TRUE)
ENDIF()

MARK_AS_ADVANCED(
   LIBUSB_INCLUDE_DIR
   LIBUSB_LIBRARIES
   LIBUSB_FOUND
)
ENDIF(WIN32)

IF(LIBUSB_INCLUDE_DIR AND LIBUSB_LIBRARIES)
   SET(LIBUSB_FOUND TRUE)
ENDIF(LIBUSB_INCLUDE_DIR AND LIBUSB_LIBRARIES)

ENDIF(NOT LIBUSB_FOUND)

IF(LIBUSB_FOUND)
  IF(NOT LIBUSB_FIND_QUIETLY)
    MESSAGE(STATUS "Found LIBUSB: ${LIBUSB_INCLUDE_DIR} and ${LIBUSB_LIBRARIES}")
  ENDIF (NOT LIBUSB_FIND_QUIETLY)
ELSE(LIBUSB_FOUND)
  IF(LIBUSB_FIND_REQUIRED)
    MESSAGE(FATAL_ERROR "Could not find LIBUSB")
  ENDIF(LIBUSB_FIND_REQUIRED)
ENDIF(LIBUSB_FOUND)
