/////////////////////////////////////////////////////////////////////////////
// Name:        filterDesigner.h
// Purpose:     
// Author:      Ewout Boks
// Modified by: 
// Created:     Thursday, 24 June 2021 at 15:51:14
// RCS-ID:      
// Copyright:   (c)2012-2021 ir drs E.J Boks, Hogeschool van Arnhem en Nijmegen
// Licence:     
/////////////////////////////////////////////////////////////////////////////

////// -----*- C++ -*- generated by wxGlade 0.4 on Fri Feb 16 10:31:09 2007
/* $Id: filterDesigner.h 313 2023-01-30 13:54:35Z ewout $                    */

/************ Opdracht 4  DSB practicum                          ***************/
/************ Werk deze code verder uit volgens de opdracht             ********/
/************ Copyright 2006-2021 Hogeschool van Arnhem en Nijmegen     ********/
/************ ir drs E.J Boks                                           ********/

#ifndef _FILTERDESIGNER_H_
#define _FILTERDESIGNER_H_


/*!
 * Includes
 */
#include <algdef.h>
#include <filterDesignerBasis.h>
#include <firfilter.h>
#include <desktopApp.h>

////@begin includes
#include "wx/frame.h"
#include "wx/spinctrl.h"
#include "wx/tglbtn.h"
////@end includes

/*!
 * Forward declarations
 */

////@begin forward declarations
class GrafiekVenster;
class wxSpinCtrl;
class wxToggleButton;
////@end forward declarations

/*!
 * Control identifiers
 */

////@begin control identifiers
#define SYMBOL_FILTERVENSTER_STYLE wxDEFAULT_FRAME_STYLE|wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU
#define SYMBOL_FILTERVENSTER_TITLE _("FIR filter designer for HAN Embedded Systems Engineering Digital Signal Processing")
#define SYMBOL_FILTERVENSTER_IDNAME HoofdVensterID
#define SYMBOL_FILTERVENSTER_SIZE wxDefaultSize
#define SYMBOL_FILTERVENSTER_POSITION wxDefaultPosition
////@end control identifiers


/*!
 * FilterVenster class declaration
 */

class FilterVenster: public wxFrame, public FilterDesignerBasis
{
DECLARE_CLASS( FilterVenster )
DECLARE_EVENT_TABLE()

public:
	/// Constructors
	FilterVenster();

	explicit FilterVenster(DesktopApp &,
	                       wxWindowID id = SYMBOL_FILTERVENSTER_IDNAME,
	                       const wxString& caption = SYMBOL_FILTERVENSTER_TITLE,
	                       const wxPoint& pos = SYMBOL_FILTERVENSTER_POSITION,
	                       const wxSize& size = SYMBOL_FILTERVENSTER_SIZE,
	                       long style = SYMBOL_FILTERVENSTER_STYLE);

	/// Destructor
	~FilterVenster() override;

private:

	bool Create( wxWindow* parent, wxWindowID id = SYMBOL_FILTERVENSTER_IDNAME,
	             const wxString& caption = SYMBOL_FILTERVENSTER_TITLE,
	             const wxPoint& pos = SYMBOL_FILTERVENSTER_POSITION,
	             const wxSize& size = SYMBOL_FILTERVENSTER_SIZE,
	             long style = SYMBOL_FILTERVENSTER_STYLE );

	/// Initialises member variables
	void Init();

	/// Creates the controls and sizers
	void CreateControls();

////@begin FilterVenster event handler declarations

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_ABOUT
    void OnAboutClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_SAVE
    void OnSaveClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for wxID_SAVE
    void OnSaveUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for wxID_EXIT
    void OnExitClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for wxID_EXIT
    void OnExitUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for BerekenFilterAktieID
    void OnBerekenFilterAktieIDClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for BerekenFilterAktieID
    void OnBerekenFilterAktieIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ExporteerFilterImpulseBeeldID
    void OnExporteerFilterImpulseBeeldIDClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ExporteerFilterImpulseBeeldID
    void OnExporteerFilterImpulseBeeldIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ExporteerFreqBeeldID
    void OnExporteerFreqBeeldIDClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ExporteerFreqBeeldID
    void OnExporteerFreqBeeldIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_MOTION event handler for TijdDomeinGrafiekID
    void OnMotion( wxMouseEvent& event );

    /// wxEVT_ENTER_WINDOW event handler for TijdDomeinGrafiekID
    void OnEnterWindow( wxMouseEvent& event );

    /// wxEVT_LEAVE_WINDOW event handler for TijdDomeinGrafiekID
    void OnLeaveWindow( wxMouseEvent& event );

    /// wxEVT_UPDATE_UI event handler for ToonAnalogeFrekID
    void OnToonAnalogeFrekIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for HANLogoID
    void OnHANLogoIDClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for SampFreqID
    void OnSampFreqIDClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for SampFreqID
    void OnSampFreqIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for FilterOrdeID
    void OnFilterOrdeIDClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for FilterOrdeID
    void OnFilterOrdeIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for MaxVersterkingID
    void OnMaxVersterkingIDUpdated( wxSpinEvent& event );

    /// wxEVT_UPDATE_UI event handler for MaxVersterkingID
    void OnMaxVersterkingIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for VensterChoiceID
    void OnVensterChoiceIDSelected( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for VensterChoiceID
    void OnVensterChoiceIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for BitKoderingID
    void OnBitKoderingIDUpdated( wxSpinEvent& event );

    /// wxEVT_UPDATE_UI event handler for BitKoderingID
    void OnBitKoderingIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ToonFilterKoeffsID
    void OnToonFilterKoeffsIDClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for ToonFilterKoeffsID
    void OnToonFilterKoeffsIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_SLIDER_UPDATED event handler for BandBeginSliderID
    void OnBandBeginSliderIDUpdated( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for BandBeginSliderID
    void OnBandBeginSliderIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_SLIDER_UPDATED event handler for BandEindeSliderID
    void OnBandEindeSliderIDUpdated( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for BandEindeSliderID
    void OnBandEindeSliderIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_UPDATE_UI event handler for TestSignaalKeuzeID
    void OnTestSignaalKeuzeIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_SLIDER_UPDATED event handler for TestSignaalFrekID
    void OnTestSignaalFrekIDUpdated( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for TestSignaalFrekID
    void OnTestSignaalFrekIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_SLIDER_UPDATED event handler for TestSignaalAmplitudeID
    void OnTestSignaalAmplitudeIDUpdated( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for TestSignaalAmplitudeID
    void OnTestSignaalAmplitudeIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_UPDATE_UI event handler for TekenOrigSignaalID
    void OnTekenOrigSignaalIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_UPDATE_UI event handler for TekenSplineID
    void OnTekenSplineIDUpdate( wxUpdateUIEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for FilterTestID
    void OnFilterTestIDClick( wxCommandEvent& event );

    /// wxEVT_UPDATE_UI event handler for FilterTestID
    void OnFilterTestIDUpdate( wxUpdateUIEvent& event );

////@end FilterVenster event handler declarations

////@begin FilterVenster member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end FilterVenster member function declarations

	/// Should we show tooltips?
	static bool ShowToolTips();

////@begin FilterVenster member variables
    GrafiekVenster* tijdDomeinGrafiek;
    wxStaticText* tijdDomeinCoords;
    GrafiekVenster* freqDomeinGrafiek;
    wxStaticText* freqDomeinCoords;
    wxCheckBox* toonAnalogeFrequentiesCheckBox;
    GrafiekVenster* testGrafiek;
    wxButton* sampFreqButton;
    wxStaticText* sampFreqText;
    wxButton* ordeButton;
    wxStaticText* filterOrdeText;
    wxSpinCtrl* maxVersterkingSpinCtrl;
    wxChoice* vensterChoice;
    wxSpinCtrl* fipBitsSpinCtrl;
    wxButton* berekenFilterKnop;
    wxCheckBox* toonfilterCoeffsCB;
    wxSlider* bandBeginSlider;
    wxSlider* bandEindeSlider;
    wxChoice* testSignaalChoice;
    wxSlider* testSignaalSlider;
    wxSlider* testSignaalAmplitudeSlider;
    wxCheckBox* tekenOrigineelCheckBox;
    wxCheckBox* tekenSplineCheckBox;
    wxToggleButton* filterTestButton;
    /// Control identifiers
    enum {
        HoofdVensterID = 10000,
        BerekenFilterAktieID = 10002,
        ExporteerFilterImpulseBeeldID = 10003,
        ExporteerFreqBeeldID = 10004,
        hoofdPaneel = 10005,
        TijdDomeinGrafiekID = 10006,
        TijdDomeinKoordsID = 10007,
        FreqDomeinGrafiekID = 10009,
        FrekDomeinKoordsID = 10011,
        ToonAnalogeFrekID = 10010,
        HANLogoID = 10001,
        TestGrafiekID = 10013,
        SampFreqID = 10015,
        SampFreqTextID = 10016,
        FilterOrdeID = 10017,
        FilterOrdeTextID = 10018,
        MaxVersterkingID = 10020,
        VensterChoiceID = 10022,
        BitKoderingID = 10024,
        BerekenFilterID = 10025,
        ToonFilterKoeffsID = 10026,
        BandBeginSliderID = 10027,
        BandEindeSliderID = 10028,
        TestSignaalKeuzeID = 10029,
        TestSignaalFrekID = 10031,
        TestSignaalAmplitudeID = 10032,
        TekenOrigSignaalID = 10033,
        TekenSplineID = 10034,
        FilterTestID = 10030
    };
////@end FilterVenster member variables

	enum
	{
		KlokVerlopenID = TekenSplineID+1
	};

	/*! @note Vanaf hier \/  Door de student in te vullen funkties */
#ifdef InterfaceTaalNederlands
	/*! @brief de funktie die het Driehoek venster berekent.
	 * @param[in] n : het samplemoment.
	 * @return : DE vensterwaarde voor (n,M) */
	double driehoek(const Int32 n ) const;

	/*! @brief de funktie die het Hamming venster berekent.
	 * @param[in] n : het samplemoment.
	 * @return : DE vensterwaarde voor (n,M) */
	double hamming(const Int32 n) const;

	/*! @brief De funktie die sinc(hoek) uitvoert.
	 * @param[in] n : de hoek.
	 * @return : De sinc waar voor (hoek) */
	static double sinc(double hoek ) ;

	void berekenFilter(wxCommandEvent &);  /* bereken de filter coefficienten. */
	void berekenFreqResponsie();  /* bereken de freq responsie  */
	void tekenFreqSpectrum() const;

	/*! @brief Deze  funktie moeten worden gebruikt om van
	 * floating point naar fixed point te converteren.
	 * @param flp : Floating point waarde.
	 * @return : De overeenkomstige fixed point waarde. */
	Int16 berekenFixedPoint(const float flp) const;

	/*! @brief Deze  funktie moeten worden gebruikt om van fixed point
	 * naar floating point te converteren.
	 * @param fixp : fixed point waarde.
	 * @return : De overeenkomstige floating point waarde. */
	float berekenFloatingPoint(const Int16 fixp) const;

#elif defined(InterfaceTaalEnglish)
	/*! @brief the function that calculates the Triangle window.
	 * @param[in] n : the sample moment.
	 * @return : The window value for (n) */
	double triangle(const Int32 n ) const;

	/*! @brief the function that calculates the Hamming window.
	 * @param[in] n : the sample moment.
	 * @return : The window value for (n) */
	double hamming(const Int32 n) const;

	/*! @brief the function that computes the sinc value.
	 * @param[in] angle : the angle.
	 * @return : The sinc value for (angle) */
	double sinc(double angle ) const;

    /*! @brief Compute the filter coefficients. */
    void computeFilter(wxCommandEvent& event);

	/*! @brief Compute the frequency response. */
	void computeFreqResponse();

	/*! @brief Draw the frequency response. */
	void drawFreqSpectrum() const;

	/*! @brief This feature must be used to from
	 * convert floating point to fixed point.
	 * @param flp : Floating point value.
	 * @return : The reciprocal fixed point value. */
	Int16 computeFixedPoint(const float flp) const;

	/*! @brief This function must be used to switch from fixed point
	 * convert to floating point.
	 * @param fixp : fixed point value.
	 * @return : The reciprocal floating point value. */
	float computeFloatingPoint(const Int16 fixp) const;
#endif

	/*! @note Tot hier /\  Door de student in te vullen funkties / students fill out until here. */


	/*! @brief start en stop het filter */
	void filterStart();
	void filterStop();
	void klokVerlopenHandler(wxTimerEvent &event);
/* event handlers om muisbeweging te detecteren */
	void tijdViewMuisBewegingHandler(wxMouseEvent &);
	void tijdViewBinnenkomstHandler(wxMouseEvent &);
	void tijdViewBuitengangHandler(wxMouseEvent &);

	void freqViewMuisBewegingHandler(wxMouseEvent &);
	void freqViewBinnenkomstHandler(wxMouseEvent &);
	void freqViewBuitengangHandler(wxMouseEvent &);

	bool bandControleRoutine(wxCommandEvent &) const;

	wxConfig *filterConfig;
	wxString dataPad;

	wxTimer klok;

	//UInt16 taps,orde;
	//Teller testIndex,testTekenIndex;
	PuntLijst filterSignaalLijst;

	/* Voor studenten : Dit is een array voor de fixed point filter coefficienten, vul deze uit jullie coefficientenfunktie.
	 * For students : This is an array for the fixed point filter coefficients, fill this out of your coefficient function. */
	wxArrayShort filterCoeffs;

	/* Voor studenten : Dit is een array voor de frequentie spectrum punten.
	 * For students : This is an array for the frequency spectrum points. */
	wxArrayDouble H_Omega;

	/* Voor studenten De minimale en maximale H(omega) respons. Let op H(omega) altijd 0 of kleiner !
	 * Gebruik deze waarden om te schalen.
	 * For students: The minimum and maximum H (omega) response. Note H (omega) always 0 or smaller!
	 * Use these values to scale.
	 */
	double H_Omega_min,H_Omega_max;

	FilterFirInt16 *filter;


	const wxString DemoTekst;
};

#endif
// _FILTERDESIGNER_H_
